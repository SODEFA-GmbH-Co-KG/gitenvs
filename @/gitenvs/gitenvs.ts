import { readFirstLine } from '@/lib/readFirstLine'
import { existsSync, statSync } from 'fs'
import { readFile, writeFile } from 'fs/promises'
import { every, map, some } from 'lodash-es'
import { join } from 'path'
import { z } from 'zod'
import { AUTO_GEN_HEADLINE, generateEnvFiles } from './generateEnvFiles'
import { getCwd } from './getCwd'
import { Gitenvs } from './gitenvs.schema'

export const latestGitenvsVersion = 2

export const getIsLatestGitenvsVersion = async () => {
  return (await getGitenvsVersion()) === latestGitenvsVersion
}

export const getGitenvsVersion = async () => {
  const gitenvsContent = await readFile(join(getCwd(), 'gitenvs.json'), 'utf-8')
  const gitenvs = z
    .object({ version: z.string() })
    .parse(JSON.parse(gitenvsContent))
  return parseInt(gitenvs.version)
}

export const checkGitenvsJsonExists = () => {
  return existsSync(join(getCwd(), 'gitenvs.json'))
}

export const getGitenvs = async () => {
  const gitenvsContent = await readFile(join(getCwd(), 'gitenvs.json'), 'utf-8')
  const gitenvs = Gitenvs.parse(JSON.parse(gitenvsContent))

  return gitenvs
}

export const checkShouldRegenerateEnvFiles = async () => {
  const gitenvs = await getGitenvs()
  const gitenvsFileInfo = statSync(join(getCwd(), 'gitenvs.json'))
  const updatedAt = gitenvsFileInfo.mtime
  const envFileRegenerateInfos = map(gitenvs.envFiles, (envFile) => {
    const isExisting = existsSync(join(getCwd(), envFile.filePath))
    if (!isExisting) {
      return {
        shouldRegenerate: true,
      }
    }
    const envFileInfo = statSync(join(getCwd(), envFile.filePath))
    return {
      shouldRegenerate: envFileInfo.mtime < updatedAt,
    }
  })
  return some(envFileRegenerateInfos, (info) => info.shouldRegenerate)
}

const allFilesAutoGenerated = async (stage: string) => {
  const gitenvs = await getGitenvs()
  const headline = AUTO_GEN_HEADLINE(stage)

  const filesAutoGenerated = await Promise.all(
    map(gitenvs.envFiles, async (envFile) => {
      const firstLine = await readFirstLine({
        path: join(getCwd(), envFile.filePath),
        usrOpts: {
          encoding: 'utf-8',
          lineEnding: '\n',
        },
      })
      console.log(firstLine)
      return firstLine.includes(headline)
    }),
  )
  return every(filesAutoGenerated)
}

export const saveGitenvs = async (gitenvs: Gitenvs) => {
  const path = join(getCwd(), 'gitenvs.json')
  const isValid = Gitenvs.safeParse(gitenvs)
  if (!isValid.success) {
    throw new Error(isValid.error.message)
  }
  await writeFile(path, JSON.stringify(gitenvs, null, 2))
  if (await allFilesAutoGenerated('development')) {
    await generateEnvFiles({ stage: 'development' })
  }
}
